let start_time = datetime(QueryStartDate); 
let end_time = datetime(QueryEndDate);  
let MailDirection = dynamic(["Inbound","Outbound","Intra-org"]);
let Reports = CloudAppEvents  
| where Timestamp between (start_time .. end_time)
| where ActionType == "UserSubmission" or ActionType == "AdminSubmission"
| extend MessageDate = todatetime((parse_json(RawEventData)).MessageDate)
| extend NetworkMessageID = tostring((parse_json(RawEventData)).ObjectId)
| extend Date_value = tostring(format_datetime( MessageDate, "yyyy-MM-dd"))
| distinct Date_value,NetworkMessageID
| summarize count() by Date_value
| project Date_value, MessagesGotReported=count_;
let ThreatByAutomation = (AlertEvidence | where Title == "Email reported by user as malware or phish")
| extend LastVerdictfromAutomation = tostring((parse_json(AdditionalFields)).LastVerdict)
| extend Date_value = tostring(format_datetime( Timestamp, "yyyy-MM-dd"))
| extend DetectionFromAIR = iif(isempty(LastVerdictfromAutomation), "NoThreatsFound", tostring(LastVerdictfromAutomation))
| summarize TotalInvestigations = count(),
            NoThreatsFound = countif(DetectionFromAIR contains "NoThreatsFound"),
            Suspicious = countif(DetectionFromAIR contains "Suspicious"),
            Malicious = countif(DetectionFromAIR contains "Malicious")
            by Date_value          //Date Reported from Message Submissions from CloudAppEvents does not match to the AIR Investigations from Alert playbooks
| project Date_value, TotalInvestigations, NoThreatsFound, Suspicious, Malicious;
let DeliveryEvents = (EmailEvents | where EmailDirection in (MailDirection) and Timestamp between (start_time .. end_time)
| extend Date_value = tostring(format_datetime( Timestamp, "yyyy-MM-dd"))
| project Date_value, Timestamp, NetworkMessageId, DetectionMethods ,RecipientEmailAddress,EmailDirection,ThreatTypes,DeliveryLocation);
let PostDeliveryEvents = (EmailPostDeliveryEvents | where ActionType contains "ZAP" and ActionResult == "Success"| join DeliveryEvents on RecipientEmailAddress, NetworkMessageId //Only successful ZAP Events, there could still be more, join on Recipient and NetID
| extend Date_value = tostring(format_datetime( Timestamp, "yyyy-MM-dd")) //Zap Timestamp is used and not MessageDate received
| summarize PostDeliveryZAP=count() by Date_value);
let DeliveryByThreat = (DeliveryEvents
| where Timestamp between (start_time .. end_time)
| extend Date_value = tostring(format_datetime( Timestamp, "yyyy-MM-dd"))
| extend MDO_detection = parse_json(DetectionMethods)
| extend FirstDetection = iif(isempty(MDO_detection), "Clean", tostring(bag_keys(MDO_detection)[0]))
| extend FirstSubcategory = iif(FirstDetection != "Clean" and array_length(MDO_detection[FirstDetection]) > 0, strcat(FirstDetection, ": ", tostring(MDO_detection[FirstDetection][0])), "No Detection (clean)"))
| summarize TotalEmails = count(),
            Clean = countif(FirstSubcategory contains "Clean"),
            Malware = countif(FirstSubcategory contains "Malware"),
            Phish = countif(FirstSubcategory contains "Phish"),
            Spam = countif(FirstSubcategory contains "Spam" and FirstSubcategory !contains "Bulk"),
            Bulk = countif(FirstSubcategory contains "Bulk")
            by Date_value,EmailDirection;
let Threat_Type = dynamic(["Malware","Phish"]);
let TopTargetedUsers = ( EmailEvents
| where EmailDirection in (MailDirection) and Timestamp between (start_time .. end_time)
| where ThreatTypes in (Threat_Type)
| extend Date_value = tostring(format_datetime( Timestamp, "yyyy-MM-dd"))
| summarize count() by Date_value,RecipientEmailAddress
| sort by Date_value
| take 15
| extend Bundle = bag_pack_columns(RecipientEmailAddress,count_)
| project Date_value,Bundle
| summarize Top15Users = make_set(Bundle) by Date_value);
let OrgLevelOverrides = ( EmailEvents 
| where  Timestamp between (start_time .. end_time) and isnotempty(ThreatTypes)
| where DeliveryLocation == "Inbox/folder"  and OrgLevelAction == "Allow" 
| extend Date_value = tostring(format_datetime(Timestamp, "yyyy-MM-dd"))
| summarize OrgLevelAllowAction = count()
            by Date_value);
let MailDeliveryLocation = ( EmailEvents
| extend Date_value = tostring(format_datetime( Timestamp, "yyyy-MM-dd"))
| summarize count() by Date_value,DeliveryLocation
| extend DeliveryLocationBundle = bag_pack_columns(DeliveryLocation,count_)
| project Date_value,DeliveryLocationBundle
| summarize AllDeliveryLocations = make_set(DeliveryLocationBundle) by Date_value);
DeliveryByThreat
| join kind=fullouter Reports on Date_value
| join kind=fullouter PostDeliveryEvents on Date_value
| join kind=fullouter ThreatByAutomation on Date_value
| join kind=fullouter TopTargetedUsers on Date_value
| join kind=fullouter OrgLevelOverrides on Date_value
| join kind=fullouter MailDeliveryLocation on Date_value
| sort by Date_value asc
| project Date_value,AllDeliveryLocations, Top15Users,EmailDirection, TotalEmails, Clean, Malware, Phish, Spam, Bulk, MessagesGotReported, PostDeliveryZAP, TotalInvestigations, NoThreatsFound, Malicious, Suspicious,OrgLevelAllowAction
| where isnotempty(Date_value) // As Reports from CloudAppEvents Submissions could contain messages submitted before 30 days it is good to remove all > 30 days, otherwise EMailEvents wouldn't have a date

